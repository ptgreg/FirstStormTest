/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleStruct implements org.apache.thrift.TBase<SimpleStruct, SimpleStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleStruct");

  private static final org.apache.thrift.protocol.TField PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("Provider", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_FIELD_DESC = new org.apache.thrift.protocol.TField("Merchant", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("Keyword", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleStructTupleSchemeFactory());
  }

  public int Provider; // required
  public int Merchant; // required
  public String Keyword; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROVIDER((short)1, "Provider"),
    MERCHANT((short)2, "Merchant"),
    KEYWORD((short)3, "Keyword");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROVIDER
          return PROVIDER;
        case 2: // MERCHANT
          return MERCHANT;
        case 3: // KEYWORD
          return KEYWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROVIDER_ISSET_ID = 0;
  private static final int __MERCHANT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("Provider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT, new org.apache.thrift.meta_data.FieldMetaData("Merchant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("Keyword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleStruct.class, metaDataMap);
  }

  public SimpleStruct() {
  }

  public SimpleStruct(
    int Provider,
    int Merchant,
    String Keyword)
  {
    this();
    this.Provider = Provider;
    setProviderIsSet(true);
    this.Merchant = Merchant;
    setMerchantIsSet(true);
    this.Keyword = Keyword;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleStruct(SimpleStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.Provider = other.Provider;
    this.Merchant = other.Merchant;
    if (other.isSetKeyword()) {
      this.Keyword = other.Keyword;
    }
  }

  public SimpleStruct deepCopy() {
    return new SimpleStruct(this);
  }

  @Override
  public void clear() {
    setProviderIsSet(false);
    this.Provider = 0;
    setMerchantIsSet(false);
    this.Merchant = 0;
    this.Keyword = null;
  }

  public int getProvider() {
    return this.Provider;
  }

  public SimpleStruct setProvider(int Provider) {
    this.Provider = Provider;
    setProviderIsSet(true);
    return this;
  }

  public void unsetProvider() {
    __isset_bit_vector.clear(__PROVIDER_ISSET_ID);
  }

  /** Returns true if field Provider is set (has been assigned a value) and false otherwise */
  public boolean isSetProvider() {
    return __isset_bit_vector.get(__PROVIDER_ISSET_ID);
  }

  public void setProviderIsSet(boolean value) {
    __isset_bit_vector.set(__PROVIDER_ISSET_ID, value);
  }

  public int getMerchant() {
    return this.Merchant;
  }

  public SimpleStruct setMerchant(int Merchant) {
    this.Merchant = Merchant;
    setMerchantIsSet(true);
    return this;
  }

  public void unsetMerchant() {
    __isset_bit_vector.clear(__MERCHANT_ISSET_ID);
  }

  /** Returns true if field Merchant is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchant() {
    return __isset_bit_vector.get(__MERCHANT_ISSET_ID);
  }

  public void setMerchantIsSet(boolean value) {
    __isset_bit_vector.set(__MERCHANT_ISSET_ID, value);
  }

  public String getKeyword() {
    return this.Keyword;
  }

  public SimpleStruct setKeyword(String Keyword) {
    this.Keyword = Keyword;
    return this;
  }

  public void unsetKeyword() {
    this.Keyword = null;
  }

  /** Returns true if field Keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.Keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.Keyword = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROVIDER:
      if (value == null) {
        unsetProvider();
      } else {
        setProvider((Integer)value);
      }
      break;

    case MERCHANT:
      if (value == null) {
        unsetMerchant();
      } else {
        setMerchant((Integer)value);
      }
      break;

    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROVIDER:
      return Integer.valueOf(getProvider());

    case MERCHANT:
      return Integer.valueOf(getMerchant());

    case KEYWORD:
      return getKeyword();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROVIDER:
      return isSetProvider();
    case MERCHANT:
      return isSetMerchant();
    case KEYWORD:
      return isSetKeyword();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleStruct)
      return this.equals((SimpleStruct)that);
    return false;
  }

  public boolean equals(SimpleStruct that) {
    if (that == null)
      return false;

    boolean this_present_Provider = true;
    boolean that_present_Provider = true;
    if (this_present_Provider || that_present_Provider) {
      if (!(this_present_Provider && that_present_Provider))
        return false;
      if (this.Provider != that.Provider)
        return false;
    }

    boolean this_present_Merchant = true;
    boolean that_present_Merchant = true;
    if (this_present_Merchant || that_present_Merchant) {
      if (!(this_present_Merchant && that_present_Merchant))
        return false;
      if (this.Merchant != that.Merchant)
        return false;
    }

    boolean this_present_Keyword = true && this.isSetKeyword();
    boolean that_present_Keyword = true && that.isSetKeyword();
    if (this_present_Keyword || that_present_Keyword) {
      if (!(this_present_Keyword && that_present_Keyword))
        return false;
      if (!this.Keyword.equals(that.Keyword))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleStruct typedOther = (SimpleStruct)other;

    lastComparison = Boolean.valueOf(isSetProvider()).compareTo(typedOther.isSetProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Provider, typedOther.Provider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchant()).compareTo(typedOther.isSetMerchant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Merchant, typedOther.Merchant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(typedOther.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Keyword, typedOther.Keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleStruct(");
    boolean first = true;

    sb.append("Provider:");
    sb.append(this.Provider);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Merchant:");
    sb.append(this.Merchant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Keyword:");
    if (this.Keyword == null) {
      sb.append("null");
    } else {
      sb.append(this.Keyword);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleStructStandardSchemeFactory implements SchemeFactory {
    public SimpleStructStandardScheme getScheme() {
      return new SimpleStructStandardScheme();
    }
  }

  private static class SimpleStructStandardScheme extends StandardScheme<SimpleStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Provider = iprot.readI32();
              struct.setProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Merchant = iprot.readI32();
              struct.setMerchantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
      oprot.writeI32(struct.Provider);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_FIELD_DESC);
      oprot.writeI32(struct.Merchant);
      oprot.writeFieldEnd();
      if (struct.Keyword != null) {
        oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
        oprot.writeString(struct.Keyword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleStructTupleSchemeFactory implements SchemeFactory {
    public SimpleStructTupleScheme getScheme() {
      return new SimpleStructTupleScheme();
    }
  }

  private static class SimpleStructTupleScheme extends TupleScheme<SimpleStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProvider()) {
        optionals.set(0);
      }
      if (struct.isSetMerchant()) {
        optionals.set(1);
      }
      if (struct.isSetKeyword()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProvider()) {
        oprot.writeI32(struct.Provider);
      }
      if (struct.isSetMerchant()) {
        oprot.writeI32(struct.Merchant);
      }
      if (struct.isSetKeyword()) {
        oprot.writeString(struct.Keyword);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.Provider = iprot.readI32();
        struct.setProviderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Merchant = iprot.readI32();
        struct.setMerchantIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Keyword = iprot.readString();
        struct.setKeywordIsSet(true);
      }
    }
  }

}

